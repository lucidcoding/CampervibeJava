package uk.co.luciditysoftware.campervibe.tests.domain.entities.booking;

import static org.junit.Assert.*;

import java.text.*;
import java.util.*;
import org.junit.*;
import uk.co.luciditysoftware.campervibe.domain.requests.booking.*;
import uk.co.luciditysoftware.campervibe.domain.entities.*;
import uk.co.luciditysoftware.campervibe.domain.common.*;

public class ValidateMakeTests 
{
	@Test
	public void ValidRequestPasses() throws ParseException
    {
		//Arrange.
		/*
        var customer = new Customer()
        {
            Id = Guid.NewGuid(),
            FamilyName = "Blue"
        };
		*/
		
		Vehicle vehicle = new Vehicle();
		/*{{ 
            //Id = Guid.NewGuid()
        }};*/

        List<Booking> bookings = new ArrayList<Booking>();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-M-yyyy hh:mm:ss");
        
        bookings.add(new Booking() 
        {{
            setStartDate(dateFormat.parse("01-09-2050 00:00:00"));
            setEndDate(dateFormat.parse("03-09-2050 00:00:00"));
            setVehicle(vehicle);
        }});

        vehicle.setBookings(bookings);
		MakeRequest request = new MakeRequest();
        //request.Customer = customer;
        request.setStartDate(dateFormat.parse("01-10-2050 00:00:00"));
        request.setEndDate(dateFormat.parse("01-10-2050 00:00:00"));
        request.setVehicle(vehicle);

        //Act.
        List<ValidationMessage> validationMessages = Booking.validateMake(request);
        
        //Assert.
        assertEquals(0, validationMessages.size());
    }
/*
    [TestMethod]
    public void InvalidRequestFails()
    {
        var request = new MakeBookingRequest();

        var customer = new Customer()
        {
            Id = Guid.NewGuid(),
            FamilyName = "Blue"
        };

        var vehicle = new Vehicle()
        {
            Id = Guid.NewGuid()
        };

        vehicle.Bookings = new List<Booking>()
        {
            new Booking() 
            {
                StartDate = new DateTime(2050, 9, 30),
                EndDate = new DateTime(2050, 10, 2),
                Vehicle = vehicle
            }
        };

        request.Customer = customer;
        request.StartDate = new DateTime(2050, 10, 1);
        request.EndDate = new DateTime(2050, 10, 3);
        request.Vehicle = vehicle;

        var validationMessages = Booking.ValidateMake(request);

        Assert.AreEqual(1, validationMessages.Count);
        Assert.IsTrue(validationMessages.Any(x => x.Text.Equals("Booking conflicts with existing bookings.")));
    }
    */
}
