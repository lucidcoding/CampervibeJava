package uk.co.luciditysoftware.campervibe.domain.entities;

import java.util.*;
import java.math.*;
import uk.co.luciditysoftware.campervibe.domain.requests.booking.*;
import uk.co.luciditysoftware.campervibe.domain.common.*;

public class Booking 
{
	private String bookingNumber;
	private Date startDate;
	private Date endDate;
	private BigDecimal startMileage;
	private BigDecimal endMileage;
	private Vehicle vehicle;
	//private Customer Customer { get; set; }
	private Date collectedOn;
	private Date returnedOn;
	private BigDecimal total;
	
	public String getBookingNumber() 
	{
		return bookingNumber;
	}
	
	public void setBookingNumber(String bookingNumber) 
	{
		this.bookingNumber = bookingNumber;
	}
	
	public Date getStartDate() 
	{
		return startDate;
	}
	
	public void setStartDate(Date startDate) 
	{
		this.startDate = startDate;
	}
	
	public Date getEndDate() 
	{
		return endDate;
	}
	
	public void setEndDate(Date endDate) 
	{
		this.endDate = endDate;
	}
	
	public BigDecimal getStartMileage() 
	{
		return startMileage;
	}
	
	public void setStartMileage(BigDecimal startMileage) 
	{
		this.startMileage = startMileage;
	}
	
	public BigDecimal getEndMileage() 
	{
		return endMileage;
	}
	
	public void setEndMileage(BigDecimal endMileage) 
	{
		this.endMileage = endMileage;
	}
	
	public Vehicle getVehicle() 
	{
		return vehicle;
	}
	
	public void setVehicle(Vehicle vehicle) 
	{
		this.vehicle = vehicle;
	}
	
	public Date getCollectedOn() 
	{
		return collectedOn;
	}
	
	public void setCollectedOn(Date collectedOn) 
	{
		this.collectedOn = collectedOn;
	}
	
	public Date getReturnedOn() 
	{
		return returnedOn;
	}
	
	public void setReturnedOn(Date returnedOn) 
	{
		this.returnedOn = returnedOn;
	}
	
	public BigDecimal getTotal() 
	{
		return total;
	}
	
	public void setTotal(BigDecimal total) 
	{
		this.total = total;
	}
	
	public static List<ValidationMessage> ValidateMake(MakeRequest request)
    {
		List<ValidationMessage> validationMessages = new ArrayList<ValidationMessage>();
		Date now = new Date();
		
        if (request.getStartDate() == null)
        {
            validationMessages.add(new ValidationMessage() 
            {{
            	setType(ValidationMessageType.ERROR);
            	setField("StartDate");
            	setField("Start date is required.");
            }});
        }
        else if (request.getStartDate().before(now))
        {
            validationMessages.add(new ValidationMessage() 
            {{
            	setType(ValidationMessageType.ERROR);
            	setField("StartDate");
            	setField("Start date must not be in the past.");
            }});
        }
        
        if (request.getEndDate() == null)
        {
        	validationMessages.add(new ValidationMessage() 
            {{
            	setType(ValidationMessageType.ERROR);
            	setField("EndDate");
            	setField("End date must not be in the past.");
            }});
        }
        else if (request.getEndDate().before(now))
        {
        	validationMessages.add(new ValidationMessage() 
            {{
            	setType(ValidationMessageType.ERROR);
            	setField("EndDate");
            	setField("End date must not be in the past.");
            }});
        }

        if (request.getStartDate() != null 
        		&& request.getEndDate() != null
        		&& request.getEndDate.before(request.getStartDate())
        {
        	validationMessages.add(new ValidationMessage() 
            {{
            	setType(ValidationMessageType.ERROR);
            	setField("EndDate");
            	setField("End date must not be before start date.");
            }});
        }

        if (request.Vehicle == null) validationMessages.AddError("Vehicle", "Vehicle is required.");
        if (request.Customer == null) validationMessages.AddError("Customer", "Customer is required.");

        if (request.Vehicle != null
            && request.StartDate.HasValue
            && request.EndDate.HasValue
            && request.Vehicle.GetConflictingBookings(request.StartDate.Value, request.EndDate.Value).Any())
        {
            validationMessages.AddError("", "Booking conflicts with existing bookings.");
        }

        return validationMessages;
    }

    public static Booking Make(MakeBookingRequest request)
    {
        var booking = new Booking();
        booking.Id = Guid.NewGuid();
        booking.BookingNumber = request.Customer.FamilyName.ToUpper() + DateTime.Now.ToString("yyMMddHHmmss");
        booking.StartDate = request.StartDate.Value;
        booking.EndDate = request.EndDate.Value;
        booking.Customer = request.Customer;
        booking.CreatedBy = request.Customer.User;
        booking.Vehicle = request.Vehicle;
        var totalDays = (request.EndDate.Value - request.StartDate.Value).Days + 1;
        booking.Total = totalDays * request.Vehicle.PricePerDay;
        return booking;
    }
}
